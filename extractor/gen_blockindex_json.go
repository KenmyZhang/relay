// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package extractor

import (
	"encoding/json"
	"math/big"

	"github.com/Loopring/ringminer/types"
)

var _ = (*blockIndexMarshaling)(nil)

func (b BlockIndex) MarshalJSON() ([]byte, error) {
	type BlockIndex struct {
		Number     *types.Big `json:"number" 		gencodec:"required"`
		Hash       types.Hash `json:"hash"		gencodec:"required"`
		ParentHash types.Hash `json:"parentHash"	gencodec:"required"`
	}
	var enc BlockIndex
	enc.Number = (*types.Big)(b.Number)
	enc.Hash = b.Hash
	enc.ParentHash = b.ParentHash
	return json.Marshal(&enc)
}

func (b *BlockIndex) UnmarshalJSON(input []byte) error {
	type BlockIndex struct {
		Number     *types.Big  `json:"number" 		gencodec:"required"`
		Hash       *types.Hash `json:"hash"		gencodec:"required"`
		ParentHash *types.Hash `json:"parentHash"	gencodec:"required"`
	}
	var dec BlockIndex
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Number != nil {
		b.Number = (*big.Int)(dec.Number)
	}
	if dec.Hash != nil {
		b.Hash = *dec.Hash
	}
	if dec.ParentHash != nil {
		b.ParentHash = *dec.ParentHash
	}
	return nil
}
