// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package chainclient

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/Loopring/ringminer/types"
)

var _ = (*ringMinedEventMarshaling)(nil)

func (r RingMinedEvent) MarshalJSON() ([]byte, error) {
	type RingMinedEvent struct {
		RingIndex     *types.Big    `json:"ringIndex" alias:"_ringIndex" gencodec:"required"`
		Time          *types.Big    `json:"time" alias:"_time" gencodec:"required"`
		Blocknumber   *types.Big    `json:"blockNumber" alias:"_blocknumber" gencodec:"required"`
		Ringhash      types.Hash    `json:"ringHash" alias:"_ringhash" gencodec:"required"`
		Miner         types.Address `json:"miner" alias:"_miner" gencodec:"required"`
		FeeRecepient  types.Address `json:"feeRecepient" alias:"_feeRecepient" gencodec:"required"`
		RinghashFound bool          `json:"ringHashFound" alias:"_ringhashFound" gencodec:"required"`
	}
	var enc RingMinedEvent
	enc.RingIndex = (*types.Big)(r.RingIndex)
	enc.Time = (*types.Big)(r.Time)
	enc.Blocknumber = (*types.Big)(r.Blocknumber)
	enc.Ringhash = r.Ringhash
	enc.Miner = r.Miner
	enc.FeeRecepient = r.FeeRecepient
	enc.RinghashFound = r.RinghashFound
	return json.Marshal(&enc)
}

func (r *RingMinedEvent) UnmarshalJSON(input []byte) error {
	type RingMinedEvent struct {
		RingIndex     *types.Big     `json:"ringIndex" alias:"_ringIndex" gencodec:"required"`
		Time          *types.Big     `json:"time" alias:"_time" gencodec:"required"`
		Blocknumber   *types.Big     `json:"blockNumber" alias:"_blocknumber" gencodec:"required"`
		Ringhash      *types.Hash    `json:"ringHash" alias:"_ringhash" gencodec:"required"`
		Miner         *types.Address `json:"miner" alias:"_miner" gencodec:"required"`
		FeeRecepient  *types.Address `json:"feeRecepient" alias:"_feeRecepient" gencodec:"required"`
		RinghashFound *bool          `json:"ringHashFound" alias:"_ringhashFound" gencodec:"required"`
	}
	var dec RingMinedEvent
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.RingIndex == nil {
		return errors.New("missing required field 'ringIndex' for RingMinedEvent")
	}
	r.RingIndex = (*big.Int)(dec.RingIndex)
	if dec.Time == nil {
		return errors.New("missing required field 'time' for RingMinedEvent")
	}
	r.Time = (*big.Int)(dec.Time)
	if dec.Blocknumber == nil {
		return errors.New("missing required field 'blockNumber' for RingMinedEvent")
	}
	r.Blocknumber = (*big.Int)(dec.Blocknumber)
	if dec.Ringhash == nil {
		return errors.New("missing required field 'ringHash' for RingMinedEvent")
	}
	r.Ringhash = *dec.Ringhash
	if dec.Miner == nil {
		return errors.New("missing required field 'miner' for RingMinedEvent")
	}
	r.Miner = *dec.Miner
	if dec.FeeRecepient == nil {
		return errors.New("missing required field 'feeRecepient' for RingMinedEvent")
	}
	r.FeeRecepient = *dec.FeeRecepient
	if dec.RinghashFound == nil {
		return errors.New("missing required field 'ringHashFound' for RingMinedEvent")
	}
	r.RinghashFound = *dec.RinghashFound
	return nil
}
