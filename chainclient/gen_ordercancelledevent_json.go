// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package chainclient

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/Loopring/ringminer/types"
)

var _ = (*orderCancelledEventMarshaling)(nil)

func (o OrderCancelledEvent) MarshalJSON() ([]byte, error) {
	type OrderCancelledEvent struct {
		Time            *types.Big `json:"time" alias:"_time" gencodec:"required"`
		Blocknumber     *types.Big `json:"blockNumber" alias:"_blocknumber" gencodec:"required"`
		OrderHash       []byte     `json:"orderHash" alias:"_orderHash" gencodec:"required"`
		AmountCancelled *types.Big `json:"amountCancelled" alias:"_amountCancelled" gencodec:"required"`
	}
	var enc OrderCancelledEvent
	enc.Time = (*types.Big)(o.Time)
	enc.Blocknumber = (*types.Big)(o.Blocknumber)
	enc.OrderHash = o.OrderHash
	enc.AmountCancelled = (*types.Big)(o.AmountCancelled)
	return json.Marshal(&enc)
}

func (o *OrderCancelledEvent) UnmarshalJSON(input []byte) error {
	type OrderCancelledEvent struct {
		Time            *types.Big `json:"time" alias:"_time" gencodec:"required"`
		Blocknumber     *types.Big `json:"blockNumber" alias:"_blocknumber" gencodec:"required"`
		OrderHash       []byte     `json:"orderHash" alias:"_orderHash" gencodec:"required"`
		AmountCancelled *types.Big `json:"amountCancelled" alias:"_amountCancelled" gencodec:"required"`
	}
	var dec OrderCancelledEvent
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Time == nil {
		return errors.New("missing required field 'time' for OrderCancelledEvent")
	}
	o.Time = (*big.Int)(dec.Time)
	if dec.Blocknumber == nil {
		return errors.New("missing required field 'blockNumber' for OrderCancelledEvent")
	}
	o.Blocknumber = (*big.Int)(dec.Blocknumber)
	if dec.OrderHash == nil {
		return errors.New("missing required field 'orderHash' for OrderCancelledEvent")
	}
	o.OrderHash = dec.OrderHash
	if dec.AmountCancelled == nil {
		return errors.New("missing required field 'amountCancelled' for OrderCancelledEvent")
	}
	o.AmountCancelled = (*big.Int)(dec.AmountCancelled)
	return nil
}
