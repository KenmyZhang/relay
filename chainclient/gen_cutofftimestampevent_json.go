// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package chainclient

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/Loopring/ringminer/types"
)

var _ = (*cutoffTimestampChangedEventtMarshaling)(nil)

func (c CutoffTimestampChangedEvent) MarshalJSON() ([]byte, error) {
	type CutoffTimestampChangedEvent struct {
		Time        *types.Big    `json:"time" alias:"_time" gencodec:"required"`
		Blocknumber *types.Big    `json:"blockNumber" alias:"_blocknumber" gencodec:"required"`
		Owner       types.Address `json:"address" alias:"_address" gencodec:"required"`
		Cutoff      *types.Big    `json:"cutoff" alias:"_cutoff" gencodec:"required"`
	}
	var enc CutoffTimestampChangedEvent
	enc.Time = (*types.Big)(c.Time)
	enc.Blocknumber = (*types.Big)(c.Blocknumber)
	enc.Owner = c.Owner
	enc.Cutoff = (*types.Big)(c.Cutoff)
	return json.Marshal(&enc)
}

func (c *CutoffTimestampChangedEvent) UnmarshalJSON(input []byte) error {
	type CutoffTimestampChangedEvent struct {
		Time        *types.Big     `json:"time" alias:"_time" gencodec:"required"`
		Blocknumber *types.Big     `json:"blockNumber" alias:"_blocknumber" gencodec:"required"`
		Owner       *types.Address `json:"address" alias:"_address" gencodec:"required"`
		Cutoff      *types.Big     `json:"cutoff" alias:"_cutoff" gencodec:"required"`
	}
	var dec CutoffTimestampChangedEvent
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Time == nil {
		return errors.New("missing required field 'time' for CutoffTimestampChangedEvent")
	}
	c.Time = (*big.Int)(dec.Time)
	if dec.Blocknumber == nil {
		return errors.New("missing required field 'blockNumber' for CutoffTimestampChangedEvent")
	}
	c.Blocknumber = (*big.Int)(dec.Blocknumber)
	if dec.Owner == nil {
		return errors.New("missing required field 'address' for CutoffTimestampChangedEvent")
	}
	c.Owner = *dec.Owner
	if dec.Cutoff == nil {
		return errors.New("missing required field 'cutoff' for CutoffTimestampChangedEvent")
	}
	c.Cutoff = (*big.Int)(dec.Cutoff)
	return nil
}
