// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"github.com/ethereum/go-ethereum/common"
	"math/big"
)

var _ = (*orderJsonRequestMarshaling)(nil)

func (o OrderJsonRequest) MarshalJSON() ([]byte, error) {
	type OrderJsonRequest struct {
		Protocol              common.Address `json:"protocol" gencodec:"required"`
		TokenS                common.Address `json:"tokenS" gencodec:"required"`
		TokenB                common.Address `json:"tokenB" gencodec:"required"`
		AmountS               *Big           `json:"amountS" gencodec:"required"`
		AmountB               *Big           `json:"amountB" gencodec:"required"`
		Timestamp             int64          `json:"validSince" gencodec:"required"`
		Ttl                   int64          `json:"validUntil" gencodec:"required"`
		LrcFee                *Big           `json:"lrcFee" `
		BuyNoMoreThanAmountB  bool           `json:"buyNoMoreThanAmountB" gencodec:"required"`
		MarginSplitPercentage uint8          `json:"marginSplitPercentage" gencodec:"required"`
		V                     uint8          `json:"v" gencodec:"required"`
		R                     Bytes32        `json:"r" gencodec:"required"`
		S                     Bytes32        `json:"s" gencodec:"required"`
		Price                 *big.Rat       `json:"price"`
		Owner                 common.Address `json:"owner"`
		Hash                  common.Hash    `json:"hash"`
	}
	var enc OrderJsonRequest
	enc.Protocol = o.Protocol
	enc.TokenS = o.TokenS
	enc.TokenB = o.TokenB
	enc.AmountS = (*Big)(o.AmountS)
	enc.AmountB = (*Big)(o.AmountB)
	enc.Timestamp = o.Timestamp
	enc.Ttl = o.Ttl
	enc.LrcFee = (*Big)(o.LrcFee)
	enc.BuyNoMoreThanAmountB = o.BuyNoMoreThanAmountB
	enc.MarginSplitPercentage = o.MarginSplitPercentage
	enc.V = o.V
	enc.R = o.R
	enc.S = o.S
	enc.Price = o.Price
	enc.Owner = o.Owner
	enc.Hash = o.Hash
	return json.Marshal(&enc)
}

func (o *OrderJsonRequest) UnmarshalJSON(input []byte) error {
	type OrderJsonRequest struct {
		Protocol              *common.Address `json:"protocol" gencodec:"required"`
		TokenS                *common.Address `json:"tokenS" gencodec:"required"`
		TokenB                *common.Address `json:"tokenB" gencodec:"required"`
		AmountS               *Big            `json:"amountS" gencodec:"required"`
		AmountB               *Big            `json:"amountB" gencodec:"required"`
		Timestamp             *int64          `json:"validSince" gencodec:"required"`
		Ttl                   *int64          `json:"validUntil" gencodec:"required"`
		LrcFee                *Big            `json:"lrcFee" `
		BuyNoMoreThanAmountB  *bool           `json:"buyNoMoreThanAmountB" gencodec:"required"`
		MarginSplitPercentage *uint8          `json:"marginSplitPercentage" gencodec:"required"`
		V                     *uint8          `json:"v" gencodec:"required"`
		R                     *Bytes32        `json:"r" gencodec:"required"`
		S                     *Bytes32        `json:"s" gencodec:"required"`
		Price                 *big.Rat        `json:"price"`
		Owner                 *common.Address `json:"owner"`
		Hash                  *common.Hash    `json:"hash"`
	}
	var dec OrderJsonRequest
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Protocol == nil {
		return errors.New("missing required field 'protocol' for OrderJsonRequest")
	}
	o.Protocol = *dec.Protocol
	if dec.TokenS == nil {
		return errors.New("missing required field 'tokenS' for OrderJsonRequest")
	}
	o.TokenS = *dec.TokenS
	if dec.TokenB == nil {
		return errors.New("missing required field 'tokenB' for OrderJsonRequest")
	}
	o.TokenB = *dec.TokenB
	if dec.AmountS == nil {
		return errors.New("missing required field 'amountS' for OrderJsonRequest")
	}
	o.AmountS = (*big.Int)(dec.AmountS)
	if dec.AmountB == nil {
		return errors.New("missing required field 'amountB' for OrderJsonRequest")
	}
	o.AmountB = (*big.Int)(dec.AmountB)
	if dec.Timestamp == nil {
		return errors.New("missing required field 'validSince' for OrderJsonRequest")
	}
	o.Timestamp = *dec.Timestamp
	if dec.Ttl == nil {
		return errors.New("missing required field 'validUntil' for OrderJsonRequest")
	}
	o.Ttl = *dec.Ttl
	if dec.LrcFee != nil {
		o.LrcFee = (*big.Int)(dec.LrcFee)
	}
	if dec.BuyNoMoreThanAmountB == nil {
		return errors.New("missing required field 'buyNoMoreThanAmountB' for OrderJsonRequest")
	}
	o.BuyNoMoreThanAmountB = *dec.BuyNoMoreThanAmountB
	if dec.MarginSplitPercentage == nil {
		return errors.New("missing required field 'marginSplitPercentage' for OrderJsonRequest")
	}
	o.MarginSplitPercentage = *dec.MarginSplitPercentage
	if dec.V == nil {
		return errors.New("missing required field 'v' for OrderJsonRequest")
	}
	o.V = *dec.V
	if dec.R == nil {
		return errors.New("missing required field 'r' for OrderJsonRequest")
	}
	o.R = *dec.R
	if dec.S == nil {
		return errors.New("missing required field 's' for OrderJsonRequest")
	}
	o.S = *dec.S
	if dec.Price != nil {
		o.Price = dec.Price
	}
	if dec.Owner != nil {
		o.Owner = *dec.Owner
	}
	if dec.Hash != nil {
		o.Hash = *dec.Hash
	}
	return nil
}
